// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Linq;
using CoreGraphics;
using Foundation;
using OMAPGMap.Models;
using UIKit;

namespace OMAPGMap.iOS
{
	public partial class SettingsViewController : UITableViewController
	{
        public SettingsViewController(IntPtr ptr) : base(ptr)
        {
            
        }

        private List<int> TrashAdded = new List<int>();
        private List<int> TrashRemoved = new List<int>();
        private UITextField DistInput = null;

        public ViewController ParentVC { get; set; }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            Title = "Pokemon Filters";
            NavigationItem.LeftBarButtonItem = new UIBarButtonItem("Done", UIBarButtonItemStyle.Done, (sender, e) =>
            {
                if(TrashAdded.Count > 0)
                {
                    ParentVC.TrashAdded(TrashAdded);
                }
                if(TrashRemoved.Count > 0)
                {
                    ParentVC.TrashRemoved(TrashRemoved);
                }
                DismissViewController(true, null);
                var app = UIApplication.SharedApplication.Delegate as AppDelegate;
                var notifyStrings = ServiceLayer.SharedInstance.NotifyPokemon.Select(t => t.ToString()).ToArray();
                var tosave = NSArray.FromStrings(notifyStrings);
                NSUserDefaults.StandardUserDefaults.SetValueForKey(tosave, new NSString("notify"));
                NSUserDefaults.StandardUserDefaults.SetBool(ServiceLayer.SharedInstance.NotifyEnabled, new NSString("notifyEnabled"));
                NSUserDefaults.StandardUserDefaults.SetBool(ServiceLayer.SharedInstance.Notify90Enabled, new NSString("notify100"));
                NSUserDefaults.StandardUserDefaults.SetBool(ServiceLayer.SharedInstance.Notify100Enabled, new NSString("notify90"));
                NSUserDefaults.StandardUserDefaults.SetInt(ServiceLayer.SharedInstance.NotifyDistance, new NSString("notifyDistance"));
                app.UpdateDeviceData();
            });
        }

        public override nint NumberOfSections(UITableView tableView)
        {
            return 2;
        }

        public override string TitleForHeader(UITableView tableView, nint section)
        {
            return section == 0 ? "Settings" : "Pokemon Settings";
        }

        public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            
            if (indexPath.Section == 0)
            {
                UITableViewCell cell = null;
                if(indexPath.Row < 4)
                {
                    cell = tableView.DequeueReusableCell("ResetTrashCell", indexPath);
                }
                var label = cell?.ViewWithTag(1) as UILabel;
                switch(indexPath.Row)
                {
                    case 0:
                        label.Text = "Hide Everything";
                        break;
                    case 1:
                        label.Text = "Reset Default Trash";
                        break;
                    case 2:
                        label.Text = "Save Current Trash";
                        break;
                    case 3:
                        label.Text = "Recall Saved Trash";
                        break;
                    case 4:
                        cell = tableView.DequeueReusableCell("AllNotifyCell", indexPath);
                        var s = cell.ViewWithTag(2) as UISwitch;
                        label = cell.ViewWithTag(1) as UILabel;
                        label.Text = "All Notifications";
                        s.On = ServiceLayer.SharedInstance.NotifyEnabled;
                        break;
                    case 5:
                        cell = tableView.DequeueReusableCell("AllNotifyCell", indexPath);
                        var s1 = cell.ViewWithTag(2) as UISwitch;
                        label = cell.ViewWithTag(1) as UILabel;
                        label.Text = "> 90% IV Notify";
                        s1.On = ServiceLayer.SharedInstance.NotifyEnabled;
                        label.TextColor = ServiceLayer.SharedInstance.NotifyEnabled ? UIColor.Black : UIColor.Gray;
                        s1.Enabled = ServiceLayer.SharedInstance.NotifyEnabled;
                        break;
                    case 6:
                        cell = tableView.DequeueReusableCell("AllNotifyCell", indexPath);
                        var s2 = cell.ViewWithTag(2) as UISwitch;
                        label = cell.ViewWithTag(1) as UILabel;
                        label.Text = "100% IV Notify";
                        s2.On = ServiceLayer.SharedInstance.NotifyEnabled;
                        label.TextColor = ServiceLayer.SharedInstance.NotifyEnabled ? UIColor.Black : UIColor.Gray;
                        s2.Enabled = ServiceLayer.SharedInstance.NotifyEnabled;
                        break;
                    case 7:
                        cell = tableView.DequeueReusableCell("NotifyDistanceCell", indexPath);
                        var input = cell.ViewWithTag(2) as UITextField;
                        if(DistInput == null)
                        {
                            DistInput = input;
                            input.ValueChanged += (sender, e) =>
                            {
                                ServiceLayer.SharedInstance.NotifyDistance = int.Parse(DistInput.Text);
                            };
                            var tool = new UIToolbar();
                            tool.SizeToFit();
                            var done = new UIBarButtonItem("Done", UIBarButtonItemStyle.Done, (sender, e) =>
                            {
                                ServiceLayer.SharedInstance.NotifyDistance = int.Parse(DistInput.Text);
                                DistInput.ResignFirstResponder();
                            });
                            tool.SetItems(new UIBarButtonItem[] { done }, false);
                            DistInput.InputAccessoryView = tool;
                        }
                        label = cell.ViewWithTag(1) as UILabel;
                        input.Text = ServiceLayer.SharedInstance.NotifyDistance.ToString();
                        label.TextColor = ServiceLayer.SharedInstance.NotifyEnabled ? UIColor.Black : UIColor.Gray;
                        input.Enabled = ServiceLayer.SharedInstance.NotifyEnabled;

                        break;
                }
                return cell;
            }


            else
            {
                var cell = tableView.DequeueReusableCell("FilterCell", indexPath);
                var img = cell.ViewWithTag(1) as UIImageView;
                var notifyLbl = cell.ViewWithTag(2) as UILabel;
                var notifySwitch = cell.ViewWithTag(3) as UISwitch;
                var trashLbl = cell.ViewWithTag(4) as UILabel;
                var trashSwitch = cell.ViewWithTag(5) as UISwitch;
                var pokemonid = ConvertRowToID(indexPath.Row);

                img.Image = UIImage.FromBundle(pokemonid.ToString("D3"));
                if (!ServiceLayer.SharedInstance.PokemonHidden.Contains(pokemonid))
                {
                    img.Alpha = 1.0f;
                    notifyLbl.TextColor = UIColor.Black;
                    trashLbl.TextColor = UIColor.Black;
                    trashSwitch.Enabled = true;
                    trashSwitch.On = ServiceLayer.SharedInstance.PokemonTrash.Contains(pokemonid);
                    notifySwitch.Enabled = true;
                    notifySwitch.On = ServiceLayer.SharedInstance.NotifyPokemon.Contains(pokemonid);
                }
                else
                {
                    img.Alpha = 0.7f;
                    notifyLbl.TextColor = UIColor.LightGray;
                    trashLbl.TextColor = UIColor.LightGray;
                    trashSwitch.Enabled = false;
                    trashSwitch.On = false;
                    notifySwitch.Enabled = false;
                    notifySwitch.On = false;
                }
                cell.SelectionStyle = UITableViewCellSelectionStyle.None;
                return cell;
            }
        }

        public override nint RowsInSection(UITableView tableView, nint section)
        {
            return section == 0 ? 8 : ServiceLayer.NumberPokemon + ServiceLayer.Gen3.Count();
        }

        partial void TrashToggled(NSObject sender)
        {
            var trashSwitch = sender as UISwitch;
            var cell = trashSwitch.Superview.Superview as UITableViewCell;
            if (cell != null)
            {
                var path = TableView.IndexPathForCell(cell);
                var pokemonid = ConvertRowToID(path.Row);
                if(trashSwitch.On)
                {
                    TrashAdded.Add(pokemonid);
                    TrashRemoved.Remove(pokemonid);
                    ServiceLayer.SharedInstance.PokemonTrash.Add(pokemonid);
                } else 
                {
                    TrashRemoved.Add(pokemonid);
                    TrashAdded.Remove(pokemonid);
                    ServiceLayer.SharedInstance.PokemonTrash.Remove(pokemonid);
                }
            }
        }

        partial void NotifyToggled(NSObject sender)
        {
            var notifySwitch = sender as UISwitch;
            var cell = notifySwitch.Superview.Superview as UITableViewCell;
            if (cell != null)
            {
                var path = TableView.IndexPathForCell(cell);
                var pokemonid = ConvertRowToID(path.Row);
                if (notifySwitch.On)
                {
                    ServiceLayer.SharedInstance.NotifyPokemon.Add(pokemonid);
                }
                else
                {
                    ServiceLayer.SharedInstance.NotifyPokemon.Remove(pokemonid);
                }
            }
        }

        public override void RowSelected(UITableView tableView, NSIndexPath indexPath)
        {
            switch(indexPath.Row)
            {
                case 0: //hide everythings
                    for (var i = 0; i < ServiceLayer.NumberPokemon + ServiceLayer.Gen3.Count(); i++)
					{
                        var i2 = ConvertRowToID(i);
                        TrashRemoved.Clear();
                        if (!ServiceLayer.SharedInstance.PokemonTrash.Contains(i2) && !TrashAdded.Contains(i2))
						{
							TrashAdded.Add(i2);
                            ServiceLayer.SharedInstance.PokemonTrash.Add(i2);
						}
					}
					
                    TableView.ReloadData();
                    break;
                case 1: //reset trash
                    for (var i = 0; i < ServiceLayer.NumberPokemon + ServiceLayer.Gen3.Count(); i++)
					{
                        var i2 = ConvertRowToID(i);
						if (!ServiceLayer.SharedInstance.PokemonTrash.Contains(i2) && ServiceLayer.DefaultTrash.Contains(i2))
						{
							TrashAdded.Add(i2);
                            TrashRemoved.Remove(i2);
						}
						else if (ServiceLayer.SharedInstance.PokemonTrash.Contains(i2) && !ServiceLayer.DefaultTrash.Contains(i2))
						{
							TrashRemoved.Add(i2);
                            TrashAdded.Remove(i2);
						}
					}
					ServiceLayer.SharedInstance.PokemonTrash.Clear();
					ServiceLayer.SharedInstance.PokemonTrash.AddRange(ServiceLayer.DefaultTrash);
					TableView.ReloadData();
                    break;
                case 2: //save current trash
					var trashStrings = ServiceLayer.SharedInstance.PokemonTrash.Select(t => t.ToString()).ToArray();
					var tosave = NSArray.FromStrings(trashStrings);
					NSUserDefaults.StandardUserDefaults.SetValueForKey(tosave, new NSString("trashSaved"));
                    break;
                case 3: //recall saved trash
					var trash = NSUserDefaults.StandardUserDefaults.StringArrayForKey("trashSaved");
					if (trash != null)
					{
						var trashInt = trash.Select(l => int.Parse(l));
                        for (var i = 0; i < ServiceLayer.HighestPokemonId; i++)
                        {
                            if (!ServiceLayer.SharedInstance.PokemonTrash.Contains(i) && trashInt.Contains(i))
							{
								TrashAdded.Add(i);
                                TrashRemoved.Remove(i);
							}
							else if (ServiceLayer.SharedInstance.PokemonTrash.Contains(i) && !trashInt.Contains(i))
							{
								TrashRemoved.Add(i);
                                TrashAdded.Remove(i);
							}
                        }
						ServiceLayer.SharedInstance.PokemonTrash.Clear();
                        ServiceLayer.SharedInstance.PokemonTrash.AddRange(trashInt);
						TableView.ReloadData();
					}
                    break;
            }
            tableView.DeselectRow(indexPath, true);
        }

        private int ConvertRowToID(int row)
        {
            if (row >= ServiceLayer.NumberPokemon)
            {
                return ServiceLayer.Gen3[row - ServiceLayer.NumberPokemon];
            } else {
                return row+1;
            }
        }

        partial void SettingToggled(NSObject sender)
        {
            var toggle = sender as UISwitch;
            var cell = toggle.Superview.Superview as UITableViewCell;
            if (cell != null)
            {
                var path = TableView.IndexPathForCell(cell);
                if(path.Row == 4)
                {
                    ServiceLayer.SharedInstance.NotifyEnabled = toggle.On;
                } else if(path.Row == 5)
                {
                    ServiceLayer.SharedInstance.Notify90Enabled = toggle.On;
                } else if(path.Row == 6)
                {
                    ServiceLayer.SharedInstance.Notify100Enabled = toggle.On;
                }
            }
            TableView.ReloadData();
        }
	}
}
